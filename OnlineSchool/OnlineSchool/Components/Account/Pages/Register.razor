@page "/Account/Register/Student"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using OnlineSchool.Data
@using OnlineSchool.Enum
@using OnlineSchool.Models
@using OnlineSchool.Services.StudentsServices

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IStudentService StudentService

<PageTitle>Реєстрація</PageTitle>

<div class="register_content_main">
    <div class="register_content">
        <div class="register_content_block">
            <div class="register_block_form">
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                    <DataAnnotationsValidator />
                    <h1 class="register_content_header">Реєстрація учня</h1>
                    <div class="register_content_inputs">
                        <div class="inputs_first">
                            <InputText class="register_inputs_item" @bind-Value="Input.LastName" placeholder="Прізвище" />
                            <ValidationMessage For="() => Input.LastName" class="text-danger" />

                            <InputText class="register_inputs_item" @bind-Value="Input.FirstName" placeholder="Ім'я" />
                            <ValidationMessage For="() => Input.FirstName" class="text-danger" />

                            <InputText class="register_inputs_item" @bind-Value="Input.MediumName" placeholder="По батькові" />
                            <ValidationMessage For="() => Input.MediumName" class="text-danger" />

                        </div>
                        <div class="inputs_second">
                            <InputText class="register_inputs_item" @bind-Value="Input.Email" placeholder="Пошта" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />

                            <InputText type="password" class="register_inputs_item" @bind-Value="Input.Password" placeholder="Пароль" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />

                            <InputText type="password" class="register_inputs_item" @bind-Value="Input.ConfirmPassword" placeholder="Повторити пароль" />
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>
                    </div>

                    <InputSelect class="input_register" @bind-Value="Input.CLassForStudent">
                        @foreach (var item in optionsClasses)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </InputSelect>

                    <div class="register_btn">
                        <button type="submit" class="register_btn_button">Додати учня</button>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>



@code {

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";


    private List<Option> optionsClasses = new List<Option>
    {
        new Option { Value = "1", Text = "5-А" },
        new Option { Value = "2", Text = "5-Б" },
        new Option { Value = "3", Text = "6-А" },
        new Option { Value = "4", Text = "6-Б" },
        new Option { Value = "5", Text = "7-А" },
        new Option { Value = "6", Text = "7-Б" },
        new Option { Value = "7", Text = "8-А" },
        new Option { Value = "8", Text = "8-Б" },
        new Option { Value = "9", Text = "9-А" },
        new Option { Value = "10", Text = "9-Б" },
        new Option { Value = "11", Text = "10-А" },
        new Option { Value = "12", Text = "10-Б" },
        new Option { Value = "13", Text = "11-А" },
        new Option { Value = "14", Text = "11-Б" }
    };

    public class Option
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }


    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.MediumName = Input.MediumName;

        Student student = new Student();

        student.FirstName = user.FirstName;
        student.MediumName = user.MediumName;
        student.LastName = user.LastName;


        if (Input.CLassForStudent == "1")
        {
            student.ClassOfStudent = AllClasses.FifthA;
        }
        else if (Input.CLassForStudent == "2")
        {
            student.ClassOfStudent = AllClasses.FifthB;
        }
        else if (Input.CLassForStudent == "3")
        {
            student.ClassOfStudent = AllClasses.SixthA;
        }
        else if (Input.CLassForStudent == "4")
        {
            student.ClassOfStudent = AllClasses.SixthB;
        }
        else if (Input.CLassForStudent == "5")
        {
            student.ClassOfStudent = AllClasses.SeventhA;
        }
        else if (Input.CLassForStudent == "6")
        {
            student.ClassOfStudent = AllClasses.SeventhB;
        }
        else if (Input.CLassForStudent == "7")
        {
            student.ClassOfStudent = AllClasses.EighthA;
        }
        else if (Input.CLassForStudent == "8")
        {
            student.ClassOfStudent = AllClasses.EighthB;
        }
        else if (Input.CLassForStudent == "9")
        {
            student.ClassOfStudent = AllClasses.NinthA;
        }
        else if (Input.CLassForStudent == "10")
        {
            student.ClassOfStudent = AllClasses.NinthB;
        }
        else if (Input.CLassForStudent == "11")
        {
            student.ClassOfStudent = AllClasses.TenthA;
        }
        else if (Input.CLassForStudent == "12")
        {
            student.ClassOfStudent = AllClasses.TenthB;
        }
        else if (Input.CLassForStudent == "13")
        {
            student.ClassOfStudent = AllClasses.EleventhA;
        }
        else if (Input.CLassForStudent == "14")
        {
            student.ClassOfStudent = AllClasses.ElevethB;
        }

        await StudentService.AddStudent(student);

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Ви пропустили поле")]
        [StringLength(15, ErrorMessage = "Ви ввели багато символів.", MinimumLength = 2)]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Ви пропустили поле")]
        [StringLength(15, ErrorMessage = "Ви ввели багато символів.", MinimumLength = 2)]
        public string MediumName { get; set; } = "";

        [Required(ErrorMessage = "Ви пропустили поле")]
        [StringLength(15, ErrorMessage = "Ви ввели багато символів.", MinimumLength = 2)]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Ви пропустили поле")]
        public string CLassForStudent { get; set; } = "";

        [Required(ErrorMessage = "Ви пропустили поле")]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Ви пропустили поле")]
        [StringLength(100, ErrorMessage = "Введіть коректний пароль.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "Паролі не співпали")]
        public string ConfirmPassword { get; set; } = "";
    }
}
